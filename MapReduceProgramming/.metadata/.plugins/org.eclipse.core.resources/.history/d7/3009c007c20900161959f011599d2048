package custom.mr;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import custom.mr.utils.DataSplitter;
import custom.mr.utils.FileIO;
import custom.mr.utils.ProcessUtils;
import custom.mr.utils.RunShellScript;
import custom.mr.utils.TextSocket;


public class Job 
{
	
	public Class<?> Mapper;
	public Class<?> Reducer;
	public Class<?> Combiner;
	public Class<?> OutputKeyClass;
	public Class<?> OutputValueClass;
	public String inputPath;
	public String outputPath;
	public int numReducerTasks;
	public int numMapperTasks;
	
	public static boolean isPseudoMode = false;
	
	public Job() 
	{
		numReducerTasks = 1;
	}
	
	public static Job getInstance(Configuration conf, String name)
	{
		Job jobInstance = new Job();
		System.out.println("Giving instance..");
		return jobInstance;
	}
	
	public void setJarByClass(Class<?> cls)
	{
		//TODO Implement Me
	}
	
	public void setMapperClass(Class<?> cls)
	{
		System.out.println("Setting Mapper class..");
		this.Mapper = cls;
	}
	
	public String getMapperClassName()
	{
		return this.Mapper.getName();
	}
	
	public void setCombinerClass(Class<?> cls)
	{
		System.out.println("Setting Combiner class..");
		this.Combiner = cls;
	}
	
	public void setReducerClass(Class<?> cls)
	{
		System.out.println("Setting Reducer class..");
		this.Reducer = cls;
	}
	
	public String getReducerClassName()
	{
		return this.Reducer.getName();
	}
	
	public void setOutputKeyClass(Class<?> cls)
	{
		System.out.println("Setting OutputKey class..");
		this.OutputKeyClass = cls;
	}
	
	public void setOutputValueClass(Class<?> cls)
	{
		System.out.println("Setting OutputValue class..");
		this.OutputValueClass = cls;
	}
	
	public void setNumReducerTasks(int n)
	{
		this.numReducerTasks = n;
	}
	

	public Class<?> getOutputKeyClass()
	{
		return this.OutputKeyClass;
	}
	
	public Class<?> getOutputValueClass()
	{
		return this.OutputValueClass;
	}
	
	public String getInputPath()
	{
		return inputPath;
	}
	
	public String getOutputPath()
	{
		return outputPath;
	}

	public boolean waitForCompletion(boolean b) 
	{
		numMapperTasks = 1;
		
		if(! b)
		{
			LocalJobClient ljc = new LocalJobClient(numMapperTasks, numReducerTasks, inputPath, outputPath, getMapperClassName(), getReducerClassName());
			return ljc.waitForCompletion();
		}
		
		try 
		{
			// S3 code to get total size of bucket
			// divide based on pre-defined block size
			// make local copy of file list
			//System.out.println("Running data splitter..");
			//DataSplitter splitterObj = new DataSplitter();
			//numMapperTasks = splitterObj.split(ProcessUtils.DNS_LIST_FILE_NAME, inputPath);
			
			
			// SCP the fileList to all the slaves
			RunShellScript shellScriptObj = new RunShellScript();
			//shellScriptObj.runScript("dataShipper.sh");
			//System.out.println("x.txt successfully shipped");
			// Data has been shipped to the Slaves.
			//shellScriptObj.runScript("startSlaves.sh " + inputPath);
			//System.out.println("All slaves successfully started");
			
			// AT THIS POINT WITH SLAVE: x.txt, jar, master 
			
			//Context context = new Context(this.outputPath);
			
			// Ready the space for incoming MapperOutput
			ProcessUtils.makeFolder(ProcessUtils.ALL_MAPPER_OUTPUT_LOC);
			
			System.out.println("Starting the Mapper on slave instances");
			//numMapTasks = 1;
			
			// Call the Slave Driver. Send them the MapperClass
		
			BufferedReader ec2IpReader = new BufferedReader(new FileReader(ProcessUtils.DNS_LIST_FILE_NAME)); 
			
			// Skip the Master IP Address (first Line)
			String ips[] = ec2IpReader.readLine().split(" ");
			
			//String ipAddress = "";
			int i = 0;
			// ConnectionThread[] connThread  = new ConnectionThread[numMapTasks];
			ArrayList<ConnectionThread> connThread = new ArrayList<ConnectionThread>();
			
			//while(null != (ipAddress = ec2IpReader.readLine()))
			for(i=1; i <= numMapperTasks; i++)
			{
				String requestMsg = ProcessUtils.START_MAPPER + ":" + getMapperClassName() + ":" + getReducerClassName();	
				connThread.add(new ConnectionThread(ips[i], ProcessUtils.INIT_PORT + i, requestMsg));
				//System.out.println("Requesting " + ipAddress + " for starting mapper");
				connThread.get(i-1).start();
				//i++;
			}
			
			ec2IpReader.close();
			i--;
			// Now, proceed ahead only when all the Mapper outputs are done.
			while(i > 0)
			{
				connThread.get(i-1).join();
				i--;
			}
			
			Thread.sleep(10000);
			System.out.println("Mappers have finished their task.");
			
			// Broadcast "kill-all" to idle SlaveDrivers
			for(i = numMapperTasks + 1; i < ips.length; i++)
			{
				String requestMsg = ProcessUtils.KILL_SLAVE_DRIVER;	
				int toPort = ProcessUtils.INIT_PORT + i;
				System.out.println("Creating socket at " + ips[i] + ":" + toPort);				
				TextSocket conn = new TextSocket(ips[i], toPort);
				conn.putln(requestMsg);
				System.out.println("Killing Idle SlaveDriver at " + ips[i] + ":" + toPort);
				conn.close();				
			}
			
			// Now all the mapper outputs are in /tmp/outputx/
			// TODO Process all the key files and define partitions.
			// And send these partitions to reducers and wait for ACK from Reducers.
			
			// Move all the individual Mapper outputs in a combined folder
			for(int k = 0; k<ips.length-1;k++) 
			{
				ProcessUtils.moveFolder("/tmp/output" + k, ProcessUtils.ALL_MAPPER_OUTPUT_LOC);
			}
			
			// Move the scripts to Combined Mapper Output folder
			ProcessUtils.moveFolder("/tmp/createReducerInput", ProcessUtils.ALL_MAPPER_OUTPUT_LOC);
			ProcessUtils.moveFolder("/tmp/mergeMapperOutput", ProcessUtils.ALL_MAPPER_OUTPUT_LOC);
			
			System.out.println("Generating summary of Mapper output");
			shellScriptObj.runScript("allMapperOutput/mergeMapperOutput");
			
			System.out.println("Generating reducer text files..");
			PartitionHelper.createPartitions(ProcessUtils.ALL_MAPPER_OUTPUT_LOC + "/summary", "allMapperOutput/r", numReducerTasks);
			
			System.out.println("Merging similar key values");
			System.out.println("Reducers are working.. Waiting for their ACK");
			
			try
			{
				ListenerThread[] listenerThreads = new ListenerThread[numReducerTasks];
				
				for(i=0;i<numReducerTasks;i++)
				{
					listenerThreads[i] = new ListenerThread(ProcessUtils.LISTEN_PORT+i);
					listenerThreads[i].start();
				}
				
				
				//hasReduced = true;
			
			/*if(waitForReducers())
			{
				System.out.println("All reducers have written their output.");
			}*/
				writeReducerInfo(getReducerClassName());
				shellScriptObj.runScript("allMapperOutput/createReducerInput");
				
				for(i=0;i<numReducerTasks;i++)
				{
					listenerThreads[i].join();
				}
				
				// Push the output to S3 bucket
				shellScriptObj.runScript("exportTos3.sh " + outputPath);
				System.out.println("Export to " + outputPath);
				
			} catch (InterruptedException e) 
			{
				e.printStackTrace();
			}
		} catch (IOException | InterruptedException e) 
		{
			e.printStackTrace();
		}
		
		return true;
	}
	
	public boolean waitForReducers()
	{
		boolean hasReduced = false;;
		
		int i=0;
		
		
		
				
		return hasReduced;
	}
	
	private static void writeReducerInfo(String reducerClassName)
	{
		try 
		{
			BufferedWriter redInfoWriter = new BufferedWriter(new FileWriter("/tmp/reducerInfo.txt"));
			redInfoWriter.write(reducerClassName + "\n");
			redInfoWriter.close();
		} catch (IOException e) 
		{
			e.printStackTrace();
		}
	}

}

/**
 * A simple server socket thread class that will run one instance.
 * 
 * It can either listen for a list of records or just a string, based on 
 * <b>isList</b> boolean value. 
 * @author Yogiraj Awati, Ashish Kalbhor
 *
 */
class ConnectionThread extends Thread
{
	int port;
	String ec2Address;
	String request;
	String response;
	
	public ConnectionThread(String ec2Address, int port, String requestMsg) 
	{
		this.ec2Address = ec2Address;
		this.port = port;
		this.request = requestMsg;
	}
	
	@Override
	public void run() 
	{
		try 
		{
			System.out.println("Sending Start Mapper request to " + ec2Address + " at Port " + port);
			TextSocket conn = new TextSocket(ec2Address, port);
			conn.putln(request);
			
			// Go in listening mode
			System.out.println("Listening mapper success at " + (port+100));
			
			/*for(String rsp : conn)
			{
				if(rsp.contains(ProcessUtils.MAPPER_SUCCESS))
				{
					System.out.println("Received success from the slave..");
					conn.putln(ProcessUtils.KILL_SLAVE_DRIVER);
					break;
				}
			}*/
			TextSocket.Server successServer = new TextSocket.Server(port+100);
			TextSocket succConn;
			
			while(null != (succConn = successServer.accept()))
			{
				String rsp = succConn.getln();
				if(rsp.contains(ProcessUtils.MAPPER_SUCCESS))
				{
					System.out.println("Received success from the slave.. Now sending kill at " + (port + 200));
					Thread.sleep(10000);
					TextSocket killMapper = new TextSocket(ec2Address, port + 200);
					killMapper.putln(ProcessUtils.KILL_SLAVE_DRIVER);
					Thread.sleep(5000);
					killMapper.close();
					conn.close();
					break;
				}
			}
			
			
		} catch (IOException | InterruptedException e) 
		{
			e.printStackTrace();
		}
	}
}

class ListenerThread extends Thread
{
	int port;
	
	public ListenerThread(int port) 
	{
		this.port = port;
	}
	
	@Override
	public void run() 
	{
		try 
		{
			//System.out.println("Sending Start Mapper request to " + ec2Address + " at Port " + port);
			System.out.println("Master is Listening at Port : "+port);
			TextSocket.Server  server = new TextSocket.Server(port);
			
			System.out.println("Created server at " + port);
			TextSocket c;
			
			while (null != (c = server.accept())) 
			{
				String rsp = c.getln();
				System.out.println("Received " + rsp);
				break;
			}
			
			c.close();
			
		} catch (IOException e) 
		{
			e.printStackTrace();
		}
	}
}

