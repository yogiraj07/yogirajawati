package custom.mr;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashSet;
import custom.mr.utils.ProcessUtils;


public class Context 
{
	private String outputFolder = null;
	boolean isMapperContext;
	
	public Context(String outputFolder, boolean isMapperContext) 
	{
		//System.out.println("Output path for context is.. " + outputFolder);
		this.outputFolder = outputFolder;
		this.isMapperContext = isMapperContext;
		ProcessUtils.makeFolder(outputFolder);
	}
	
	public String getOutputPath()
	{
		return outputFolder;
	}

	public void write(Text key, IntWritable value)
	{
		if (isMapperContext) 
		{
			// Remove all the special characters form the Key
			// This is required to allow fileName according to the Key
			String keyString = key.toString().replaceAll("[:*?/<>|]", ""); //replaceAll("[^A-Za-z0-9 ]", "");
			// key.toString().replaceAll("[:*?/<>|]", "");
			String keyFilePath = outputFolder + "/" + keyString + ".txt";
			try 
			{
				BufferedWriter keyValueWriter = new BufferedWriter(
						new FileWriter(keyFilePath, true));
				keyValueWriter.write(value.get() + " ");
				keyValueWriter.close();
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}else
		{
			try 
			{
				BufferedWriter keyValueWriter = new BufferedWriter(new FileWriter(outputFolder + "/output.txt", true));
				keyValueWriter.write(key.toString() + "\t" + value.get() + "\n");
				keyValueWriter.close();
			} catch (IOException e1) 
			{
				e1.printStackTrace();
			}
		}
		
		/*String opline = key + "\t" + value.get();
		
		BufferedWriter writer;
		try 
		{
			writer = new BufferedWriter(new FileWriter(mapperOutputFolder, true));
			writer.write(opline + "\n");
			writer.close();
		} catch (Exception e) 
		{
			e.printStackTrace();
		}*/	
	}
	
	/*public static void main(String[] args) throws ClassNotFoundException 
	{
		Context context = new Context("output1", true);
		FileIO<Object, Object, Object, Object> fileIO = new FileIO<>();
		Class<?> MapperClass = WordCount.TokenizerMapper.class; // Class.forName("WordCount.TokenizerMapper").getClass();
		fileIO.fetchMapperInput(MapperClass, "input", 1);
	}	
	
	static class WordCount 
	{

	  public static class TokenizerMapper extends Mapper<Object, Text, Text, IntWritable>{

	    private final static IntWritable one = new IntWritable(1);
	    private Text word = new Text();

	    public void map(Object key, Text value, Context context) throws IOException, InterruptedException 
	    {
	        StringTokenizer itr = new StringTokenizer(value.toString());
		    while (itr.hasMoreTokens()) 
		    {
		        word.set(itr.nextToken());
		        context.write(word, one);
		    }
	    }
	  }

	  public static class IntSumReducer extends Reducer<Text,IntWritable,Text,IntWritable> 
	  {
	    private IntWritable result = new IntWritable();

	    public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
	      int sum = 0;
	      for (IntWritable val : values) 
	      {
	        sum += val.get();
	      }
	      result.set(sum);
	      context.write(key, result);
	    }
	  }
	}*/
}

///////////////////////////////////////////////////////////////////////////////////////////////


