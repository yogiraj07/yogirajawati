'''
The old song declares "Go ahead and hate your neighbor", and the residents of Onetinville have taken those words to heart.
Every resident hates his next-door neighbors on both sides. Nobody is willing to live farther away from the town's well than
his neighbors, so the town has been arranged in a big circle around the well. Unfortunately, the town's well is in disrepair and
 needs to be restored. You have been hired to collect donations for the Save Our Well fund.

Each of the town's residents is willing to donate a certain amount, as specified in the int[] donations, which is listed in clockwise
order around the well. However, nobody is willing to contribute to a fund to which his neighbor has also contributed. Next-door
 neighbors are always listed consecutively in donations, except that the first and last entries in donations are also for next-door
  neighbors. You must calculate and return the maximum amount of donations that can be collected.

Constraints
- donations contains between 2 and 40 elements, inclusive.
- Each element in donations is between 1 and 1000, inclusive.

Examples

 { 10, 3, 2, 5, 7, 8 }
Returns: 19
The maximum donation is 19, achieved by 10+2+7. It would be better to take 10+5+8 except that the 10 and 8 donations are from
neighbors.

{ 11, 15 }
Returns: 15

{ 7, 7, 7, 7, 7, 7, 7 }

Returns: 21
'''




######################################################################################################################
#IMPLEMENTATION
def badNeighbor(s):
    #sequence[i] stores longest increasing sequence for s[i]
    sum=[0]*len(s)
    flag=[False]*len(s)
    size=len(s)
    if size==1:
        return s[0]
    if size==2:
        return max(s[0],s[1])

    sum[0]=s[0]
    sum[1]=s[1]
    flag[1]=True
    maxDonation=0
    for i in range(2,size):
        for j in range(0,i-1):
            if sum[j]+s[i]>sum[i]:
                sum[i]=sum[j]+s[i]
                flag[i]=flag[j]

    if flag[size-1]==True :
        return sum[size-1]
    #then first and last element are part of sum[], so delete minimum value of s[0] and s[size-1]

    else :
        minValue=min(s[0],s[size-1])
        #then find max value generated by sequence with flaf=true and false
        maxDonation=max(sum[size-2],sum[size-1]-minValue)
        return maxDonation

s=[7, 7, 7, 7, 7, 7, 7 ]

print("Sequence :- ",badNeighbor(s))